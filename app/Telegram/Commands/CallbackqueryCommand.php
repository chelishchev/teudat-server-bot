<?php

namespace App\Telegram\Commands;

use App\Models\User;
use App\Telegram\Markdown;
use Longman\TelegramBot\Commands\SystemCommand;
use Longman\TelegramBot\Entities\InlineKeyboard;
use Longman\TelegramBot\Entities\ServerResponse;
use Longman\TelegramBot\Request;

class CallbackqueryCommand extends SystemCommand
{
    protected $name = 'callbackquery';

    /**
     * Main command execution
     *
     * @return ServerResponse
     * @throws \Exception
     */
    public function execute(): ServerResponse
    {
        $callbackQuery = $this->getCallbackQuery();
        $callbackData = $callbackQuery->getData();
        xdebug_break();
        $user = User::findByTelegramId($callbackQuery->getFrom()->getId());
        if (!$user || !is_string($callbackData))
        {
            return Request::emptyResponse();
        }

        if (in_array($callbackData, ['mute', 'unmute'], true))
        {
            $this->muteStep($user, $callbackData);
        }
        elseif (in_array($callbackData, ['recommend_yes', 'recommend_no'], true))
        {
            $this->recommendStep($user, $callbackData);
        }
        elseif (in_array($callbackData, ['donate_yes', 'donate_no'], true))
        {
            $this->donateStep($user, $callbackData);
        }

        return Request::emptyResponse();
    }

    private function muteStep(User $user, string $answer): void
    {
        match ($answer)
        {
            'mute' => $user->mute(),
            'unmute' => $user->unmute(),
        };

        $keyboard = (new InlineKeyboard(
            [
                ['text' => '–î–∞ üëç', 'callback_data' => 'recommend_yes'],
                ['text' => '–ù–µ—Ç', 'callback_data' => 'recommend_no'],
            ]
        ));

        \Longman\TelegramBot\Request::sendMessage([
            'chat_id' => $user->getTelegramData()->getId(),
            'text' => "–ü–æ—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç–µ –ª–∏ –≤—ã MyVisit Rega Helper —Å–≤–æ–∏–º –∑–Ω–∞–∫–æ–º—ã–º?",
            'parse_mode' => 'MarkdownV2',
            'reply_markup' => $keyboard,
            'disable_web_page_preview' => true,
        ]);
    }

    private function recommendStep(User $user, string $answer): void
    {
        $keyboard = (new InlineKeyboard(
            [
                ['text' => '–î–∞ ü•≥', 'callback_data' => 'donate_yes'],
                ['text' => '–ù–µ—Ç', 'callback_data' => 'donate_no'],
            ]
        ));

        \Longman\TelegramBot\Request::sendMessage([
            'chat_id' => $user->getTelegramData()->getId(),
            'text' => "–•–æ—Ç–∏—Ç–µ –ø–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –Ω–∞—Å –∑–∞ –Ω–∞—à—É —Ä–∞–±–æ—Ç—É –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å —Å–µ—Ä–≤–∏—Å, –æ—Å—Ç–∞–≤–∏–≤ –¥–æ–Ω–∞—Ç –Ω–∞ –ª—é–±—É—é —Å—É–º–º—É?",
            'parse_mode' => 'MarkdownV2',
            'reply_markup' => $keyboard,
            'disable_web_page_preview' => true,
        ]);
    }

    private function donateStep(User $user, string $answer): void
    {
        if ($answer === 'donate_yes')
        {
            \Longman\TelegramBot\Request::sendMessage([
                'chat_id' => $user->getTelegramData()->getId(),
                'text' => $this->buildDonateText(),
                'parse_mode' => 'MarkdownV2',
                'disable_web_page_preview' => true,
            ]);
        }
    }

    private function buildDonateText(): string
    {
        $text = "–ü–æ–±–ª–∞–≥–æ–¥–∞—Ä–∏—Ç—å –º–æ–∂–Ω–æ :int, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–∞—è –∫–∞—Ä—Ç–∞. –ò–ª–∏ :ru, –µ—Å–ª–∏ —É –≤–∞—Å —Ä–æ—Å—Å–∏–π—Å–∫–∞—è –∫–∞—Ä—Ç–∞.";

        return Markdown::escapeText($text, [
            ':int' => "[" . Markdown::escapeText('–∑–¥–µ—Å—å') . "](https://ko-fi.com/myvisit)",
            ':ru' => "[" . Markdown::escapeText('–∑–¥–µ—Å—å') . "](https://pay.cloudtips.ru/p/d41cbbdf)",
        ]);
    }
}
